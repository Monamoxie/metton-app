resource "aws_iam_role" "ecs_task_execution_role" {
  name = "ecsTaskExecutionRole"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "ecs-tasks.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_role_policy_attachment" "ecs_task_execution_role_policy" {
  role       = aws_iam_role.ecs_task_execution_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
}

# Start Github actions
resource "aws_iam_user" "github_actions" {
  name = "github-actions"
}

resource "aws_iam_access_key" "github_actions" {
  user = aws_iam_user.github_actions.name
}

resource "aws_iam_policy" "github_actions_policy" {
  name        = "GitHubActionsDeploymentPolicy"
  description = "Allows GitHub Actions to deploy to ECS and push to ECR"
  policy      = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect   = "Allow"
        Action   = [
          "ecs:UpdateService",
          "ecs:RegisterTaskDefinition",
          "ecs:DescribeServices",
          "ecs:DescribeTaskDefinition",
          "ecs:ListClusters",
          "ecs:ListServices",
          "ecs:ListTaskDefinitions",
          "ecs:TagResource"
        ]
        Resource = "*"
      },
      {
        Effect   = "Allow"
        Action   = [
          "ecr:GetAuthorizationToken",
          "ecr:BatchCheckLayerAvailability",
          "ecr:PutImage",
          "ecr:InitiateLayerUpload",
          "ecr:UploadLayerPart",
          "ecr:CompleteLayerUpload",
          "ecr:BatchGetImage",
          "ecr:GetDownloadUrlForLayer"
        ]
        Resource = "*"
      },
      {
        Effect   = "Allow"
        Action   = [
          "iam:PassRole"
        ]
        Resource = "*"
      }
    ]
  })
}

resource "aws_iam_user_policy_attachment" "github_actions_policy_attach" {
  user       = aws_iam_user.github_actions.name
  policy_arn = aws_iam_policy.github_actions_policy.arn
}
# End Github actions

output "github_actions_access_key_id" {
  value = aws_iam_access_key.github_actions.id
}

output "github_actions_secret_access_key" {
  value     = aws_iam_access_key.github_actions.secret
  sensitive = true
}

# store the secrets in a local file
resource "local_file" "github_secrets" {
  content  = <<EOT
  -----------------------------------------------------
  * This file has been auto-generated by terraform.
  * It contains your AWS ACCESS KEY and SECRET for github-actions deployment to aws. 
  * Copy these credentials and add to your github-actions secrets, then delete the file. 
  * This file MUST NOT be committed to git history.
  ----------------------------------------------------
  AWS_ACCESS_KEY_ID=${aws_iam_access_key.github_actions.id}
  AWS_SECRET_ACCESS_KEY=${aws_iam_access_key.github_actions.secret}
  EOT
  filename = ".terraform/github-actions-secrets.txt"
}

# Notification to view the file and delete it as soon as you copy out the secret
output "github_secrets_message" {
  value = <<EOT
ðŸ”¹ Your GitHub Actions AWS credentials have been stored securely at:
   .terraform/github-actions-secrets.txt

âš  Please copy the credentials immediately and add them to GitHub Secrets.
   Then delete the file by running:

   rm .terraform/github-actions-secrets.txt
EOT
  sensitive = false
}
