name: Metton Workflow

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
env:
  ECS_TASK_DEFINITION: ./ecs-task-definition.json
  IMAGE_TAG: latest
  APP_NAME: metton
  ECS_CLUSTER: mettonapp
  ECS_SERVICE: mettonapp-ecs-service
  ECR_REPOSITORY: mettonapp

jobs:
  app-deployment:
    name: Metton Deployment
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Change to the root directory
        run: cd ${{ github.workspace }}

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      # - name: Start containers
      #   run: docker-compose up --build -d

      # - name: Check All Container status
      #   run: docker ps -a

      # - name: Stop containers
      #   run: docker-compose down -v

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "true"
        env:
          AWS_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}

      - name: Deploy to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
        run: |
          services=$(docker compose config --services)
          for service in $services; do
            if [ "$service" != "mysql" ]; then
              docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$service-$IMAGE_TAG -f Dockerfile.$service .
              docker push $ECR_REGISTRY/$ECR_REPOSITORY:$service-$IMAGE_TAG
            fi
          done

      - name: Python ECS task definition
        id: python-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.2.0
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.APP_NAME }}_python_container
          image: ${{ secrets.AWS_ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:python-${{ env.IMAGE_TAG }}

      - name: Nginx ECS task definition
        id: nginx-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.2.0
        with:
          task-definition: ${{ steps.python-task-def.outputs.task-definition }}
          container-name: ${{ env.APP_NAME }}_nginx_container
          image: ${{ secrets.AWS_ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:nginx-${{ env.IMAGE_TAG }}

      - name: Deploy ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.nginx-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: false
