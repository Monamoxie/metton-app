"use client";

import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "@fontsource/roboto/300.css";
import "@fontsource/roboto/400.css";
import "@fontsource/roboto/500.css";
import "@fontsource/roboto/700.css";
import "./globals.css";
import CssBaseline from "@mui/material/CssBaseline";
import ScopedCssBaseline from "@mui/material/ScopedCssBaseline";
import * as React from "react";
import { LayoutProps } from "@/interfaces/layout_props";
import Button from "@mui/material/Button";
import { createTheme, ThemeProvider } from "@mui/material/styles";
import { PaletteMode } from "@mui/material";
import getSignInSideTheme from "./identity/signup/getSignInSideTheme";
import Stack from "@mui/material/Stack";
import ArrowBackRoundedIcon from "@mui/icons-material/ArrowBackRounded";
import ToggleColorMode from "@/app/identity/signup/ToggleColorMode";
import ToggleCustomTheme from "../utils/theme/toggle";
import { ColorModeContextProps } from "@/interfaces/theme";
import { createContext, useState, useContext, ReactNode } from "react";
import ColorModeProviderContext from "@/contexts/ColorModeProviderContext";

// export const metadata: Metadata = {
//   title: "Hello Next App",
//   description: "Generated by create next app",
// };

// Create the context with a default value (null in this case)
const ColorModeContext = createContext<ColorModeContextProps | null>(null);

export function useColorMode() {
  const context = useContext(ColorModeContext);
  if (!context) {
    throw new Error("useColorMode must be used within a ColorModeProvider");
  }
  return context;
}

// export function ColorModeProvider({ children }: { children: ReactNode }) {
//   const [mode, setMode] = useState<"light" | "dark">("dark");

//   const toggleColorMode = () => {
//     setMode((prevMode) => (prevMode === "dark" ? "light" : "dark"));
//   };

//   const SignInSideTheme = createTheme(getSignInSideTheme(mode));

//   const value = {
//     mode,
//     toggleColorMode,
//   };

//   return (
//     <ColorModeContext.Provider value={value}>
//       <ThemeProvider theme={SignInSideTheme}>{children}</ThemeProvider>
//     </ColorModeContext.Provider>
//   );
// }

export default function RootLayout(props: Readonly<LayoutProps>) {
  const [showCustomTheme, setShowCustomTheme] = React.useState(true);
  return (
    <html lang="en">
      <meta name="viewport" content="initial-scale=1, width=device-width" />
      <body>
        <>
          <CssBaseline />
          <ColorModeProviderContext>{props.children}</ColorModeProviderContext>
        </>
      </body>
    </html>
  );
}
